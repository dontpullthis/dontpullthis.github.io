{"version":3,"sources":["app/scripts/password-generator/PasswordGenerator.jsx","app/shared/blocks/CopyableField.jsx"],"names":["i","MIN_MAX_VAL","amount","length","Passwords","props","passwords","map","password","index","id","value","key","readOnly","PasswordGenerator","state","isValid","params","lowercase","uppercase","numbers","symbols","generatePasswords","bind","onCheckboxChanged","onTextChanged","this","e","paramName","target","getAttribute","setState","Object","assign","checked","forEach","minValue","maxValue","test","Error","parseInt","isNaN","getNumericParams","genPass","generateMultiple","className","Group","htmlFor","Control","type","onChange","data-name","onClick","Component","CopyableField","label","leftLen","rightLen","rows","text","defaultProps"],"mappings":"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","file":"static/js/6.85c12ea6.chunk.js","sourcesContent":["import genPass from 'generate-password';\nimport React, { Component } from 'react';\nimport { Form } from 'react-bootstrap';\n\nimport CopyableField from '../../shared/blocks/CopyableField';\n\nconst MIN_MAX_VAL = {\n    amount: [1, 100],\n    length: [1, 100],\n}\n\nconst Passwords = props => (props.passwords.map((password, index) => {\n  return <CopyableField\n      id={`scriptsPasswordGeneratorPassword${index}`}\n      value={password}\n      key={index}\n      readOnly={true}\n  />\n}));\n\nexport class PasswordGenerator extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        isValid: true,\n        params: {\n            amount: '10',\n            length: '10',\n            lowercase: true,\n            uppercase: true,\n            numbers: true,\n            symbols: true,\n        },\n        passwords: [],\n    };\n    this.generatePasswords = this.generatePasswords.bind(this);\n    this.onCheckboxChanged = this.onCheckboxChanged.bind(this);\n    this.onTextChanged = this.onTextChanged.bind(this);\n  }\n\n  componentDidMount() {\n    this.generatePasswords();\n  }\n\n  async onCheckboxChanged(e) {\n      const paramName = e.target.getAttribute('data-name');\n      await this.setState({params: Object.assign({}, this.state.params, { [paramName]: e.target.checked })});\n      this.generatePasswords();\n  }\n\n  async onTextChanged(e) {\n    const paramName = e.target.getAttribute('data-name');\n    const { value } = e.target;\n\n    if (!(paramName in MIN_MAX_VAL)) {\n        return;\n    }\n\n    await this.setState({params: Object.assign({}, this.state.params, { [paramName]: value })});\n    this.generatePasswords();\n  }\n\n  getNumericParams() {\n    const params = {};\n\n    ['amount', 'length'].forEach(paramName => {\n      const [minValue, maxValue] = MIN_MAX_VAL[paramName];\n      let value = this.state.params[paramName];\n\n      if (!/^[0-9]+$/.test(value)) {\n        throw new Error('Invalid param');\n      }\n\n      value = parseInt(value);\n      if (isNaN(value) || value < minValue || value > maxValue) {\n        throw new Error('Invalid param');\n      }\n      params[paramName] = value;\n    });\n\n    return params;\n  }\n\n  async generatePasswords() {\n    let [amount, length] = [0, 0];\n    try {\n      ({ amount, length } = this.getNumericParams());\n      this.setState({ isValid: true });\n    } catch (e) {\n      this.setState({ isValid: false });\n      return;\n    }\n\n    let { lowercase, uppercase, numbers, symbols } = this.state.params;\n\n    if (!(lowercase || uppercase || numbers || symbols)) {\n        lowercase = uppercase = numbers = symbols = true;\n        await this.setState({\n          params: Object.assign({}, this.state.params, {\n            uppercase,\n            lowercase,\n            numbers,\n            symbols\n          })\n        });\n    }\n\n    this.setState({\n        passwords: genPass.generateMultiple(amount, {\n            length,\n            uppercase,\n            lowercase,\n            numbers,\n            symbols,\n        })\n    });\n  }\n\n  render() {\n    const { params } = this.state;\n\n    return (\n      <div>\n        <div className=\"page-header\">\n          <h3 className=\"page-title\">\n            Password generator\n          </h3>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-md-6 grid-margin stretch-card\">\n            <div className=\"card\">\n              <div className=\"card-body\">\n              <h4 className=\"card-title\">Parameters</h4>\n                <form>\n                  <Form.Group>\n                    <label htmlFor=\"scriptsPasswordGeneratorAmount\">Amount({MIN_MAX_VAL.length[0]}-{MIN_MAX_VAL.length[1]})</label>\n                    <Form.Control\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"scriptsPasswordGeneratorAmount\"\n                        value={params.amount}\n                        onChange={this.onTextChanged}\n                        data-name=\"amount\"\n                        />\n                  </Form.Group>\n                  <Form.Group>\n                    <label htmlFor=\"scriptsPasswordGeneratorLength\">Password length ({MIN_MAX_VAL.length[0]}-{MIN_MAX_VAL.length[1]})</label>\n                    <Form.Control\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"scriptsPasswordGeneratorLength\"\n                        value={params.length}\n                        onChange={this.onTextChanged}\n                        data-name=\"length\"\n                        />\n                  </Form.Group>\n                  <Form.Group>\n                    <div className=\"form-check\">\n                        <label className=\"form-check-label\">\n                            <input type=\"checkbox\" className=\"form-check-input\" data-name=\"lowercase\" onChange={this.onCheckboxChanged}\n                                id=\"scriptsPasswordGeneratorLowercase\" value=\"lowercase\" checked={params.lowercase} />\n                            <i className=\"input-helper\"></i>\n                            Lowercase letters\n                        </label>\n                    </div>\n                    <div className=\"form-check\">\n                        <label className=\"form-check-label\">\n                            <input type=\"checkbox\" className=\"form-check-input\" data-name=\"uppercase\" onChange={this.onCheckboxChanged}\n                                id=\"scriptsPasswordGeneratorUppercase\" checked={params.uppercase} />\n                            <i className=\"input-helper\"></i>\n                            Uppercase letters\n                        </label>\n                    </div>\n                    <div className=\"form-check\">\n                        <label className=\"form-check-label\">\n                            <input type=\"checkbox\" className=\"form-check-input\" data-name=\"numbers\" onChange={this.onCheckboxChanged}\n                                id=\"scriptsPasswordGeneratorNumbers\" checked={params.numbers} />\n                            <i className=\"input-helper\"></i>\n                            Numbers\n                        </label>\n                    </div>\n                    <div className=\"form-check\">\n                        <label className=\"form-check-label\">\n                            <input type=\"checkbox\" className=\"form-check-input\" data-name=\"symbols\" onChange={this.onCheckboxChanged}\n                                id=\"scriptsPasswordGeneratorSymbols\" checked={params.symbols} />\n                            <i className=\"input-helper\"></i>\n                            Symbols\n                        </label>\n                    </div>\n                    <button type=\"button\" className=\"btn btn-primary btn-icon-text\" onClick={this.generatePasswords}>\n                        <i className=\"mdi mdi-refresh btn-icon-prepend\"></i>\n                        Generate again\n                      </button>\n                  </Form.Group>\n                </form>\n              </div>  \n            </div>\n          </div>\n\n          <div className=\"col-md-6 grid-margin stretch-card\">\n            <div className=\"card\">\n              <div className=\"card-body\">\n                <h4 className=\"card-title\">Passwords</h4>\n                <form>\n                    { this.state.isValid ? <Passwords passwords={this.state.passwords} /> : <p className=\"text-danger\">Please check your input</p> }\n                </form>\n              </div>  \n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default PasswordGenerator;","import propTypes from 'prop-types';\nimport React from 'react';\nimport { Form } from 'react-bootstrap';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\nconst CopyableField = props => {\n    const [leftLen, rightLen] = props.label === null ? [0, 12] : [2, 10];\n    const { onChange, readOnly } = props;\n\n    return <Form.Group className=\"row\">\n        { leftLen > 0 ? <label htmlFor={props.id} className=\"col-sm-2 col-form-label\">{props.label}</label> : null }\n        <div className={`col-sm-${rightLen}`}>\n            <div className=\"input-group\">\n                {\n                props.type === 'textarea' ?\n                <textarea\n                    className=\"form-control\"\n                    rows=\"4\"\n                    id={props.id}\n                    value={props.value}\n                    readOnly={readOnly}\n                    onChange={onChange}></textarea> :\n                <Form.Control\n                    type=\"text\"\n                    className=\"form-control\"\n                    id={props.id}\n                    value={props.value}\n                    readOnly={readOnly}\n                    onChange={onChange}\n                    />\n                }\n                <div className=\"input-group-append\">\n                <CopyToClipboard text={props.value}>\n                    <button className=\"btn btn-sm btn-primary\" type=\"button\">\n                    <i className=\"mdi mdi-content-copy\"></i>\n                    </button>\n                </CopyToClipboard>\n                </div>\n            </div>\n        </div>\n    </Form.Group>\n};\n\nCopyableField.propTypes = {\n    id: propTypes.string.isRequired,\n    onChange: propTypes.func,\n    readOnly: propTypes.bool,\n    value: propTypes.string.isRequired,\n    type: propTypes.string,\n};\n\nCopyableField.defaultProps = {\n    label: null,\n    onChange: () => {},\n    readOnly: false,\n    type: 'text',\n};\n\nexport default CopyableField;\n  "],"sourceRoot":""}